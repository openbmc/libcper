{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1854014c_10bff107",
        "filename": "sections/cper-section-memory.c",
        "patchSetId": 7
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-13T02:45:42Z",
      "side": 1,
      "message": "Is \"llX\" portable? I thought there were better sized indicators now?",
      "range": {
        "startLine": 75,
        "startChar": 59,
        "endLine": 75,
        "endChar": 62
      },
      "revId": "4b3c55377128956dc9bdafabd035b5ebd85c38f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9da0af30_182bce99",
        "filename": "sections/cper-section-memory.c",
        "patchSetId": 7
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-13T02:47:59Z",
      "side": 1,
      "message": "`PRIx64` ?",
      "parentUuid": "1854014c_10bff107",
      "range": {
        "startLine": 75,
        "startChar": 59,
        "endLine": 75,
        "endChar": 62
      },
      "revId": "4b3c55377128956dc9bdafabd035b5ebd85c38f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73b0400c_42936299",
        "filename": "sections/cper-section-memory.c",
        "patchSetId": 7
      },
      "lineNbr": 75,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2024-12-13T05:06:12Z",
      "side": 1,
      "message": "`PRIX64` fails because we typedef `long long` as `UINT64`. This works OK on my local 32b yocto build, but the compiler on jenkins interprets PRIX64 as %lx while the data is UINT64 \nhttps://github.com/openbmc/libcper/blob/d9835a173ed9611090acc6d51493128a5e387385/include/libcper/BaseTypes.h#L21\n\nSet up a test here for the error: https://jenkins.openbmc.org/job/ci-repository/96566/console",
      "parentUuid": "9da0af30_182bce99",
      "range": {
        "startLine": 75,
        "startChar": 59,
        "endLine": 75,
        "endChar": 62
      },
      "revId": "4b3c55377128956dc9bdafabd035b5ebd85c38f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3285b2a1_4aa04e63",
        "filename": "sections/cper-section-memory.c",
        "patchSetId": 7
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-13T16:15:24Z",
      "side": 1,
      "message": "Isn\u0027t BaseTypes.h just wrong here?  There seems to be no architectural basis for the typedefs listed there.\n\nhttps://en.cppreference.com/w/cpp/language/types#Integral_types\n\nI guess we happen to be lucky here in that all of the typedefs we\u0027re using are equivalent under the ILP32 and DP64 data models.\n\nThe code in BaseTypes.h as-is won\u0027t be compatible with compiling in Windows (or Windows-like environments) but maybe we don\u0027t care about that right now.",
      "parentUuid": "73b0400c_42936299",
      "range": {
        "startLine": 75,
        "startChar": 59,
        "endLine": 75,
        "endChar": 62
      },
      "revId": "4b3c55377128956dc9bdafabd035b5ebd85c38f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05612cc3_a1f75dba",
        "filename": "sections/cper-section-memory.c",
        "patchSetId": 7
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-13T16:51:58Z",
      "side": 1,
      "message": "\u003e Isn\u0027t BaseTypes.h just wrong here?  There seems to be no architectural basis for the typedefs listed there.\n\nProbably, and it\u0027s on my list to look at and understand what they did there.  I suspect they just copy/pasted a header from UEFI that might not be correct for 32 bit.\n\nIt does seem to work, and I can\u0027t really explain why.  Doesn\u0027t have a lot to do with this patch.  If we changed the type, this line would need to change, which we can do when we change the type.\n\nAre you ok if we close this out, or is there something still to fix in this review?\n\n\u003e \n\u003e https://en.cppreference.com/w/cpp/language/types#Integral_types\n\u003e \n\u003e I guess we happen to be lucky here in that all of the typedefs we\u0027re using are equivalent under the ILP32 and DP64 data models.\n\u003e \n\u003e The code in BaseTypes.h as-is won\u0027t be compatible with compiling in Windows (or Windows-like environments) but maybe we don\u0027t care about that right now.",
      "parentUuid": "3285b2a1_4aa04e63",
      "range": {
        "startLine": 75,
        "startChar": 59,
        "endLine": 75,
        "endChar": 62
      },
      "revId": "4b3c55377128956dc9bdafabd035b5ebd85c38f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fab7597c_aa549419",
        "filename": "sections/cper-section-memory.c",
        "patchSetId": 7
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-13T16:55:25Z",
      "side": 1,
      "message": "Yep.  I\u0027m ok if we close this out for now.",
      "parentUuid": "05612cc3_a1f75dba",
      "range": {
        "startLine": 75,
        "startChar": 59,
        "endLine": 75,
        "endChar": 62
      },
      "revId": "4b3c55377128956dc9bdafabd035b5ebd85c38f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bfe90d0_bf700d4b",
        "filename": "sections/cper-section-memory.c",
        "patchSetId": 7
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-14T00:47:47Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "fab7597c_aa549419",
      "range": {
        "startLine": 75,
        "startChar": 59,
        "endLine": 75,
        "endChar": 62
      },
      "revId": "4b3c55377128956dc9bdafabd035b5ebd85c38f1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}