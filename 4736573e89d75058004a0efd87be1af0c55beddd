{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fff37096_c0587048",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-07-10T00:49:29Z",
      "side": 1,
      "message": "Why?  Is there a pointer to documentation?",
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68ff1b91_96b629c1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1002126
      },
      "writtenOn": "2024-07-11T15:10:29Z",
      "side": 1,
      "message": "Unfortunately the underlying library here is lacking in this regard.",
      "parentUuid": "fff37096_c0587048",
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b831d53f_ace43a53",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-11T03:14:11Z",
      "side": 1,
      "message": "Do we know why this doesn\u0027t cause unit tests failures every time?  Is there randomization somewhere that we need to explicitly allow a seed for?",
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e253e95d_d44b247f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1002126
      },
      "writtenOn": "2024-07-11T15:10:29Z",
      "side": 1,
      "message": "The tests generate randomized CPERs as part of the process. I think in the long run we\u0027ll want a set of CPERs of known edge cases that should be handled gracefully.",
      "parentUuid": "b831d53f_ace43a53",
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4969d23a_2ed6431a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-12T16:51:44Z",
      "side": 1,
      "message": "ACK.  We should look at that randomization and just run all sizes in the future.  No real need to randomize for a library so small.\n\nOh well, problem for tomorrow.  Thanks for the info.",
      "parentUuid": "e253e95d_d44b247f",
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4734a055_93f236b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002126
      },
      "writtenOn": "2024-07-11T15:10:29Z",
      "side": 1,
      "message": "respond to current comments",
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c7c6fe5_313d2407",
        "filename": "cper-parse.c",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-11T03:13:24Z",
      "side": 1,
      "message": "Take a look at the encoded_size() function here:\nhttps://www.boost.org/doc/libs/1_68_0/boost/beast/core/detail/base64.hpp\n\nWe need the equivalent here, and it doesn\u0027t look like the base64 library we have provides one, so we\u0027ll have to invent one, but it should be identical to the one I linked.",
      "range": {
        "startLine": 338,
        "startChar": 25,
        "endLine": 338,
        "endChar": 58
      },
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf5e6baf_7de764a9",
        "filename": "cper-parse.c",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1002126
      },
      "writtenOn": "2024-07-11T15:10:29Z",
      "side": 1,
      "message": "ACK, do we think we should switch to a better implemented library given this issue all up or run with rolling our own endcoded_size() function?",
      "parentUuid": "1c7c6fe5_313d2407",
      "range": {
        "startLine": 338,
        "startChar": 25,
        "endLine": 338,
        "endChar": 58
      },
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93d31d7b_ed8d7287",
        "filename": "cper-parse.c",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-12T16:51:44Z",
      "side": 1,
      "message": "I think in the future we should just embed a simple base64 decoder instead of trying to take a dependency.  A quick look shows that base64 implementations in C are ~80 lines of code.  We have almost that much config in just managing the dependency.\n\nbut in the context of this commit, we need to put in an encoded_size method that returns the correct size to malloc for a given input.",
      "parentUuid": "cf5e6baf_7de764a9",
      "range": {
        "startLine": 338,
        "startChar": 25,
        "endLine": 338,
        "endChar": 58
      },
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "039a49db_0ba399a8",
        "filename": "cper-parse.c",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-13T13:08:48Z",
      "side": 1,
      "message": "if you\u0027re looking to vendor utility code, [ccan](https://github.com/rustyrussell/ccan) is often a good starting point. for instance it has a [BSD/MIT licensed base64 module](https://github.com/rustyrussell/ccan/tree/master/ccan/base64)",
      "parentUuid": "93d31d7b_ed8d7287",
      "range": {
        "startLine": 338,
        "startChar": 25,
        "endLine": 338,
        "endChar": 58
      },
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "599580ab_e365fb23",
        "filename": "cper-parse.c",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-15T16:25:56Z",
      "side": 1,
      "message": "Thanks for the pointer.",
      "parentUuid": "039a49db_0ba399a8",
      "range": {
        "startLine": 338,
        "startChar": 25,
        "endLine": 338,
        "endChar": 58
      },
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a27e5ca4_b6a2892b",
        "filename": "cper-parse.c",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-15T21:24:32Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/libcper/+/72777\n\nI think obsoletes this patch.",
      "parentUuid": "599580ab_e365fb23",
      "range": {
        "startLine": 338,
        "startChar": 25,
        "endLine": 338,
        "endChar": 58
      },
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80c27542_56d714e3",
        "filename": "cper-parse.c",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1002126
      },
      "writtenOn": "2024-07-15T21:34:06Z",
      "side": 1,
      "message": "Agree, abandoning.",
      "parentUuid": "a27e5ca4_b6a2892b",
      "range": {
        "startLine": 338,
        "startChar": 25,
        "endLine": 338,
        "endChar": 58
      },
      "revId": "4736573e89d75058004a0efd87be1af0c55beddd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}