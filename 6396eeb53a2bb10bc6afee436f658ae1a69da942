{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "30e8e0a3_96a0c65e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-07T05:32:06Z",
      "side": 1,
      "message": "Are you sure? What flags are you building the C++ with? For instance, the following godbolt example suggests that with `-std\u003dc++23 -Wall -Werror -pedantic` the problem is not resolved:\n\nhttps://godbolt.org/z/b4ean44o6\n\nSeparately, as a super nitpick and language lawyering aside, your example below involves a flexible-array-member, which is a different concept to a variable-length-array. Syntactically, the former has no defined size, while the the size of the latter is defined by a value that\u0027s not an integer constant expression. VLAs are created using [`alloca()`](https://man7.org/linux/man-pages/man3/alloca.3.html):\n\n\u003e The alloca() function allocates size bytes of space in the stack\n\u003e frame of the caller.  This temporary space is automatically freed\n\u003e when the function that called alloca() returns to its caller.\n\n... which Has Some Problems:\n\n\u003e The alloca() function returns a pointer to the beginning of the\n\u003e allocated space.  If the allocation causes stack overflow,\n\u003e program behavior is undefined.",
      "revId": "6396eeb53a2bb10bc6afee436f658ae1a69da942",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac932807_7c5f5f72",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1002160
      },
      "writtenOn": "2024-09-07T11:42:57Z",
      "side": 1,
      "message": "it is a flex array member that I need to be using (updated commit message).\n\nThe flags are part of the meson build settings. \n\nthe flex array member is in another commit that needs to be rebased after merging this.",
      "parentUuid": "30e8e0a3_96a0c65e",
      "revId": "6396eeb53a2bb10bc6afee436f658ae1a69da942",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1af38b11_ec21c9c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1002160
      },
      "writtenOn": "2024-09-07T20:41:25Z",
      "side": 1,
      "message": "BTW, the issue I’m addressing is that an extern “C” is not enough in the CPP files, so I’m not surprised by the results of that godbolt sample.\n\nThose guards already exist in CPP files (before this changeset), which is why there are no linker errors with C functions when tests/*.cpp get compiled (meson option -Dtests\u003denabled)\n\nThe C++ compiler stops complaining only when the .h file itself has the extern “C” guards.",
      "parentUuid": "ac932807_7c5f5f72",
      "revId": "6396eeb53a2bb10bc6afee436f658ae1a69da942",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "247b2995_b757cfd7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-08T01:58:56Z",
      "side": 1,
      "message": "Okay, however, in my godbolt experiment above, both struct declarations cause warnings with `-pedantic`, and neither cause them if you drop it. So I\u0027m trying to understand how you came to make your claim here. It doesn\u0027t seem like there\u0027s a transition from generating a warning without `extern \"C\"` to not generating a warning with it under `-pedantic`, and if you\u0027re not building with `-pedantic` then it shouldn\u0027t occur anyway?\n\nFurther, regarding the meson build options, OpenBMC CI enables `-Dwarning_level\u003d3`:\n\nhttps://github.com/openbmc/openbmc-build-scripts/blob/decca83981004f97e0ee8c1ffc0c3589bf9d0a09/scripts/unit-test.py#L923\n\nwhich is what turns on `-pedantic`:\n\nhttps://mesonbuild.com/Builtin-options.html#details-for-warning_level\n\nThe default build options specified in `meson.build` are overridden.\n\nFor what it\u0027s worth, in libpldm my philosophy is that headers should be written as strictly-conforming to the standards as possible. This way they don\u0027t constrain the build flags of dependent projects. I allow a bit more room for flexibility in the implementation",
      "parentUuid": "ac932807_7c5f5f72",
      "revId": "6396eeb53a2bb10bc6afee436f658ae1a69da942",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bd449af_de390ba9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-08T02:00:29Z",
      "side": 1,
      "message": "\u003e The C++ compiler stops complaining only when the .h file itself has the extern “C” guards.\n\nAh, that\u0027s interesting.",
      "parentUuid": "247b2995_b757cfd7",
      "revId": "6396eeb53a2bb10bc6afee436f658ae1a69da942",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bcf161f_4a1045af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-08T03:17:36Z",
      "side": 1,
      "message": "So I [redid the godbolt example](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMRMAPVgB3oDpkPHqSqoGBAMrIm9EAEYALKPEEAqgGdMABU4gA5AAZ9pAFYLStJg1DIApACYAQo6ekt9ZATzjKjdADCqLQAriwMIA6k/gAyeAyYAHJhAEaYxJGGpDyoGoQ%2BDEGh4ZHZufnicQnJLGkZDlkemF4FkgRMxARFYRFRTS3ibR0EVUmp6Znu7Z3dJX3TI/FjtRMNAJTuqCHEyOz6jgDM8cihWADUdgcByBoE%2BKiX2HaGAILPbw5HDCch544OXF4AgQ/3e7y4BHSDAuDgcAX%2BFwA7C5Xmc0WdbsQQl4zpDbgB9ZBIlEvdFks7xAi4zC3S4k8nokIMPLABLoM7IBAdXHIKisOwAVhcAoAInT3mS7IixQcSVKxa93pjsVS8QRCcJiRL0ZTqbTZdq0UyWWyOVziDzhHyWILhTK5dLxYrXrqWEx4hA1mDkYazsRMARttDDE63tL9BtaAYBSYIvp5CZUBxuCw%2BJhBMJSAQDMYNhAkGgsLhCCRyJQaPRmGwDAmVBJpLJ2Eo6%2BotLocyZzFErDYUK5XNlrElWOxAange5MJ5vL4IP5ZhFEdEGOhRjU6gp5GU8jPCsEeiAlzkdwU1%2BMMvIt/1d0MZvuSkvr60FmeVherwsF4epsNXxvLxsGhbDseyHHgVArpgVBnNgAAaLwALLaDE2D4gAEmCnxYDQCQwfBSEoehYKvBCUIwnCCJSvS6LKjiaqEviCBaqiDIUhIeoEKGrFnMaeCspg7KctyBCctatqCvavryqG0nOh8Bz%2BOBEaWNGsYdqQSZjmm/AIFmHZ5gWGA4PgRBkBQ1B0IwI4gAECFMAA1pgcS3Bo/AEJwBAtg2cjNmIEiaDoehGJ2IAHJY1i2G6jmTtOBR%2BCuX4AGxhbESzrhMArbhUe7FBEyVZbuf4ZTFzQ3p%2B955WFT6DC%2BaXniAmW3MMSVVbV1T1QKgHAbsBjIFFmD4iw8R4CwYT4v6ACOIR4P66AQAAatgABKkgAJIAPKJGcBz8PIhj8A4XqvDwxCoKYpUQNhTAhLQVKLStG1bft%2B3yEdLxMOg6D4lwzQhO0KT0HOKZpmcWkCEIPBvdMwABoSqCppZ%2BJUJgTCBv6GhA0CmBnNoahODEq0BBynCcPitxfZ8UMdDD6poAj9D4qgPC7hjYPY7j%2BOE2cAC0ADqsi0DzvPpKdFrczwAnWN4yBrMpUb6DGpBxsYGk2XZjnOQQrnuZ52bBQZKDwzwllmZQdPG/QGTAEoUQVpCxAaJQKTqSk8QdAAnjWJiu8wxDu%2BtKTnV4XukHTbASOtDC0J7wWkFgKQhMAAQC478YmFgbo2HIsf4P6LQAG40upP3IH9ey1pSU7qbQeApMQHtBFg6kEMQI0h4XxApLkmAipgmfADXvb66IVjABo814JgADu60S3GtZ%2BVIMg%2Bcoi8Be2sfmFuPa2P2ziWLXjuQBsTMswYiYd63WBH56JUDBEc4JRVFipe1b4WMe2Vflun%2BFXV79XinKVZ8zVn6ANijVX8/9/w/jvLlCwTVOhFQvBsFumAmyRlUkrdSSZ9BnE4AADkStzRKigzjAGQESJQB0zgQAACr%2BmxocV6Jg9a5g2PZUKO0Dg8N4XwvhiUVL6EUGpWOuCTCOzCmw5ScBYBIDQZgMsEA%2BoOUwC8YgY8DDcxFLZF4ABpVCTg1CrRiCKfEdCACa2gngHBFL3BOwATDmxNjECKIQmAw1WugPszgByl1uPDdaf0eB/QAGKWSrKOYG9BRCWRvnOEyJAvEWArJgZJW5UmROTFjDMIhQD6BMHgDQq1vinAEupIpdl4iSG6uXQpGhZ6MGrhFZJBS8wCRLMQZJttLLdNiZWaybMdKkHyaRYg0J/jwlhMxUkNEW4qg4gxY4ZT2RUV9GSXUaouKsV4vxQS5ozhiSFBJbZaJpIGkVOGcgxTSm/HKbHSp7oGA1O2D1NO1zGnKxMDvVpMiOmmWSWFVJgL%2BlWWrLZVRmttYeRGb1fqg1hqjRYONTAU0ZoCQWstNam1tq7X2odd4J0zoXSujdO6WLHpnGertN6H0volz%2BkwAGmBMbjmxkMiGVMNGw2cQzZGqNtg0lZSDDmBMibIBJmTO4%2BJKbvGhjyo2iNT4FFZtE9meMxVCwFkLEWJAeYS3QFLPAMt6klJ%2BFgbxDyNBVOebUipDS57NJsL8tYGwikQsctoU6QdpFmAsAkKe4T6DJMUJghWoiVa4IYegmEBxazSNdaQThPD%2BD8LTbwwR8sRHYLEefdwIAsgJtILIxAIAtgEBCZ5cyvL0iJGsvoQhxDSHkMoWcahDgTCL28k2Veqh15BRVlvLMjC8DeK3FPeuPAvZhsVl81W%2BggkVr%2BmcVA0FG0kLIRQqhigaEQCCPTdIsaWF6X1hwrhqb01pqEdmud4j82Fv0mGjtObI15oTRsDueRfCKCAA%3D%3D) to exercise the header path, and it still errors with `-pedantic` for all approaches. Any ideas?",
      "parentUuid": "1bd449af_de390ba9",
      "revId": "6396eeb53a2bb10bc6afee436f658ae1a69da942",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}